local defarc = require "defarc.defarc"
local defarc_test = require "defarc.defarc_test"	-- unit and functional testing, not needed for project

local options = {}									-- store current options table locally for convenience in input handling

function show_current_text_and_options()			-- helper function to get and set current dialogue text and options
	local text = defarc.get_text()
	options = defarc.get_options_table()

	gui.set_text(gui.get_node("NPC"), text)			-- set text

	for i=1,3 do									-- set 3 corresponding options - can be improved with a dynamic list
		gui.set_text(gui.get_node("Option_"..i), options[i] and options[i].label or "")
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")

	defarc.load("/example_arcweave_template/import/project_settings.json")			-- loading Arcweave exported JSON from custom resources
	defarc.select_element(defarc.get_starting_element())-- selecting starting element

	show_current_text_and_options()					-- display text and options from selected element
end

function on_input(self, action_id, action)
	for i = 1,3 do
		local current_option_node = gui.get_node("Option_"..i)

		if gui.pick_node(current_option_node, action.x, action.y) then	-- handle clicking on option nodes
			if action.pressed then
				gui.set_scale(current_option_node, vmath.vector4(0.9))	-- scale clicked options a little
			elseif action.released then
				gui.set_scale(current_option_node, vmath.vector4(1))	-- scale it back when released

				local jumper = defarc.get_jumper(options[i].target_id)
				if jumper then			-- if the target id is a jumper
					defarc.select_element(defarc.get_jumper_element_id(jumper))
				else
					defarc.select_element(options[i].target_id)			-- select next element
				end

				if defarc.get_element_title() == "Exit" then			-- if one of elements have title "Exit"
					defarc.select_element(defarc.get_starting_element())			-- we will just start over (or we can quit the conversation here)
				end

				show_current_text_and_options()							-- display next text and options
			end
			return true
		end

	end
end

function final(self)
	msg.post(".", "release_input_focus")
end